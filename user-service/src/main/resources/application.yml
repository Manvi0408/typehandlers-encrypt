server:
  port: 8081

spring:
  application:
    name: user-service
  
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/user_service_db
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres123}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 1800000
      connection-timeout: 30000
  
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: false
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
  
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
  
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:admin}
    password: ${RABBITMQ_PASSWORD:admin123}
    virtual-host: /
    listener:
      simple:
        retry:
          enabled: true
          initial-interval: 1000
          max-attempts: 3
          multiplier: 2
  
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000
  
  cloud:
    config:
      uri: ${CONFIG_SERVICE_URL:http://localhost:8888}
      fail-fast: true
  
  sleuth:
    zipkin:
      base-url: ${ZIPKIN_URL:http://localhost:9411}
    sampler:
      probability: 1.0

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVICE_URL:http://localhost:8761/eureka}
    fetch-registry: true
    register-with-eureka: true
  instance:
    prefer-ip-address: true

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

logging:
  level:
    com.womensafety.userservice: DEBUG
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:womensafety-secret-key-for-jwt-token-generation-2024}
  expiration: 86400000 # 24 hours in milliseconds
  refresh-expiration: 604800000 # 7 days in milliseconds

# Security Configuration
security:
  password:
    min-length: 8
    require-uppercase: true
    require-lowercase: true
    require-numbers: true
    require-special-chars: true
  
  account:
    max-login-attempts: 5
    lockout-duration: 1800000 # 30 minutes in milliseconds
    verification-token-expiry: 86400000 # 24 hours
    password-reset-expiry: 3600000 # 1 hour

# Email Configuration
email:
  verification:
    subject: "Women Safety Platform - Verify Your Account"
    from: "noreply@womensafety.com"
    template: "verification-email.html"
  
  password-reset:
    subject: "Women Safety Platform - Password Reset"
    from: "noreply@womensafety.com"
    template: "password-reset-email.html"

# File Upload Configuration
file:
  upload:
    max-size: 10MB
    allowed-types: image/jpeg,image/png,image/gif
    upload-dir: ${FILE_UPLOAD_DIR:./uploads}

# Cache Configuration
cache:
  user:
    ttl: 3600 # 1 hour
  session:
    ttl: 86400 # 24 hours

# OpenAPI Configuration
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha
  info:
    title: User Service API
    description: Women Safety Platform - User Management and Authentication API
    version: 1.0.0
    contact:
      name: Women Safety Platform Team
      email: support@womensafety.com